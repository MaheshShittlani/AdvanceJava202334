Segment of JAVA
--------------------
1. Java SE (Java Standard Edition)
    - Java fundamental Concepts
    - Java standard API/Library
    - Standalone solution

2. Java EE (Java Enterprise Edition)
    - Web based solution
    - Multiple API to build web application
        - Servlet API
        - JSP API
        - Taglib Library
        - JDBC API
        - Email API
3. Java ME (Java mobile edition) - Not in Use
    - Mobile based solution

-----------------------------------------------------
Note: J2EE provide API to build web based application.


What is the Web application?
-------------------------------
Web application is the collection of multiple web pages hosted on a server and any web page has its unique address(URI) with them it can be accessed.

What is the web page?
----------------------
Web pages are the piece of program that can be run over the browser throught the internet.

Types of web pages...
----------------------
    1. Static web pages
    2. Dynamic web pages

Static web pages...
---------------------
    Static pages are those that can't be changed automatically. It need to be changed manually.

    Generally static web pages are created with html, css.

Dynamic web pages....
------------------------
    It can be automatically changes (updated) by a program running in background.


Web application terminology
-----------------------------
1. Client - client is a person/pc/browser which is sending the request to acces the web page.

2. Server - is a machine or software program which provide the service or serve(host) your resources(files, images, program, data).

3. Web pages can be access by sending the `Request` to the server, server find the web pages, run some process if need and send the `Response`.

4. Request
-----------------
    - URI / URL
    - Request / HTTP Method (Get / Post)
    - Request Header
        - Platform (windows, linux, mobile)
        - user-agent: browser
        - ip-address: 
    - Request data / Request Body / Payload

5. Reponse
----------------
    - Status Code 
        - 200 - Success
        - 404 - Page not found (4XX)
        - 500 - Server side error (5XX)
    - Respons Header
    - Response Body / Response Data/ Payload

How static resources are processed?
--------------------------------------
    Static Reources - The files that don't need to process before sending to the client.
        - html files
        - css files
        - js files
        - images
        - pdf files
        - Audio / Video file

How dynamic pages are processed?
--------------------------------------
    Dynamic Resource - The files that should be processed before sending to the client.
        - Servlet
        - Jsp pages
    
Port
---------
    - Port is the unique idenfication of a server.
        - Web(http) server - 80(Apache)
                     - 8080 (Apache Tomcat)
        - Secure web server - https: 443
        - Mysql Server - 3306

Server
-----------
    - Web server (http server) -> Apache Tomcat
        - Servlet Container
        - JSP Container
    - Database Server (Data storage)




Servlet
------------
    What is the servlet?
    -----------------------
    1. Servlets are Java-based server-side components that dynamically generate web content and handle client requests.
    
    2. They provide a way to create dynamic web applications by extending the functionality of web servers.

    3. Servlets are part of the Java Servlet API, which is a specification that defines how servlets should behave and interact with the web server.

Installation of Tomcat
---------------------------
1. Tomcat home: C:/apache-tomcat
2. Important Jar
	-----------------
		- servlet-api.jar
		- jsp-api.jar
		- el-api.jar

3. Summary of tomcat directories
------------------------------------
1. bin: Contains the executable files and scripts for starting, stopping, and managing Tomcat server instances. It includes files like startup.bat (or startup.sh for Unix-based systems) and shutdown.bat (or shutdown.sh).

2. conf: Contains configuration files for Tomcat. The main file is server.xml, which configures the server-specific settings like ports, connectors, and global resources. Other files include web.xml for default web application settings and various XML files for configuring realms, security, and logging.


3. lib: Contains Java Archive (JAR) files required by Tomcat and its web applications. It includes Tomcat's own libraries and dependencies that provide additional functionality. You can also place third-party libraries in this directory that should be shared across multiple web applications.

4. logs: Contains log files generated by Tomcat, including catalina.out, which contains standard output and error messages. It also includes access logs, which record details about incoming requests and other log files for different components.

5. webapps: This directory is the default location for deploying web applications. Each web application is typically placed in a separate directory under the webapps directory. When Tomcat starts, it automatically deploys the web applications found in this directory.

6. work: Temporary directory used by Tomcat for storing compiled JSPs, cached classes, and other temporary files generated during runtime. It is recommended not to modify or delete files in this directory manually.

7. temp: Another temporary directory used by Tomcat for storing temporary files that are not related to specific web applications. It can include uploaded files, session data, and other temporary data. Like the work directory, it is advisable not to modify or delete files in this directory manually

Tomcat Configuration
-------------------------
0. Set the JRE_HOME or JAVA_HOME environment variable with Java path
1. What is the port?
2. How to change the port -> Tomcat dirctory-> conf -> sever.xml -> change 8080
3. How to create tomcat-users and access the manage-gui
--------------------------------------------------------------

Directory structure(packaging) of J2EE application
----------------------------------------------------
App1
    -WEB-INF (private resources)
        - classes (.class file of all servlets)
        - lib
            - dependencies (.jar file of library)
        -web.xml (deployment descriptor) - Application configration

    -META-INF
        -context.xml (applicaiton configration)

            (public resources)
    - index.html
    - css files
    - js files
    - image files

Program: Write a servlet to say "Hello World".

Note: From servlet api 3.0, annotation based configuration is introduced that reduce the uses of xml(web.xml) based configuration.

Program: ReWrite a servlet to say "Hello World" with annotation based configutation.

Configuration for the welcome files
-------------------------
<welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>home.html</welcome-file>
    <welcome-file>welcome.html</welcome-file>
</welcome-file-list>

Program: Write a program to process the user input through servlet.

IDE - Integrated Development environment.
-----------
1. Editor
2. Compiler
3. Intellisense
4. Interpretor
5. Code management tools
6. Code generation tools
7. Third party tools

Java popular IDE
---------------------
1. Ecllipse - Free 
2. Visual Studio Code - Free
3. Netbeans - Free trial
4. Intellij Idea - Paid


Ecllipse Directory Structure
-------------------------------
src (Source code)
    - main
        - java
            - java files organized in packages
        - webapp
            -WEB-INF
                -classes
                -lib
                -web.xml
            -META-INF
            - public files (html, css, js, jsp etc)
build
    - classes
        - java complied classes

-----------------------------
MVC - Code Restructure in a manner that Java code (business) logic can be decoupled from UI Code (html).
------------------

M (Model) - Are the classes which deal with storing and retrieving data from db or flat files
V (View) - Are the files(html, jsp) which is used to display the pages/response to the user.
C (Controllers) - Are the classes (servlet) which is used to handle the communication between view and models and plain java objects(POJO).

--------------------------------------------

Servlet Life Cycle
--------------------------------------
The life cycle of a servlet refers to the series of stages that a servlet goes through, from its initialization to its destruction. 

1. **Initialization**: 
	During initialization, the servlet container creates an instance of the servlet and initializes it by calling the `init()` method. This method is called only once during the lifetime of the servlet. It is typically used to perform one-time setup tasks, such as loading configurations, establishing database connections, or initializing resources.

2. **Request Handling**: 
	Once the servlet is initialized, it is ready to handle client requests. For each incoming request, the servlet container calls the `service()` method of the servlet. The `service()` method determines the type of the request (GET, POST, etc.) and delegates the request to the appropriate method (`doGet()`, `doPost()`, etc.) based on the HTTP method.

3. **Request Processing**: 
	The servlet's request processing methods, such as `doGet()` and `doPost()`, handle the request-specific logic. These methods are responsible for processing the request parameters, performing business operations, generating dynamic content, and interacting with databases or other external resources.

4. **Response Generation**: 
	After the request processing is complete, the servlet generates the response to be sent back to the client. The response typically includes HTML content, JSON data, or other forms of output. The servlet sets the response headers, writes the response body, and may also perform redirects or set cookies.

5. **Destroying**: 
	The servlet container calls the `destroy()` method when it decides to remove the servlet from service. This typically occurs when the container is shutting down or when the servlet is being unloaded due to configuration changes or application redeployment. The `destroy()` method is used to release any resources held by the servlet, close database connections, or perform cleanup tasks.


Http Method
------------------
1. Get: doGet() - When get/feching the information from server.
2. Post: doPost() - When posting/storing information on to the server.
3. Put: doPut() - When updating detail
4. Patch: doPatch() - When small information of data is patched or updated.
5. Delete: doDelete() - Trying to delete the information 
6. Head: doHead()
7. Trace: doTrace()
8. Option: doOption()

-------------------------------------------
doGet(HttpRequest request, HttpResponse response)
-------------

HttpRequest Method
---------------------
1. String getMethod()
2. String getParameter(String key): Retrieves the value of a request parameter specified by its key. It is commonly used to access from data or query parameters sent with the request.
3. String[] getParamterValue(String key): Retrieves an array of values for a request parameter specified by its key. This method is used when a parameter can have multiple values, such as checkboxes with the same name.
    Example:
        <input type="checkbox" name="hobby" value="Cricket"> Cricket
        <input type="checkbox" name="hobby" value="Football"> Football
        <input type="checkbox" name="hobby" value="Music"> Music

4. ServletContext getServletContext(): Returns the `ServletContext` associated with the servlet. ServletContext is a class which holds all the information related to the application environment.
        Example#1:
            ServletContext application = request.getServletContext();
            applicaiton.getRealPath('\WEB-INF\subscriber.txt);
                    OR
            String path = request.getServletContext().getRealPath('\WEB-INF\subscriber.txt");
        Example#2:
            RequestDispatcher dispather = request.getRequestDispatcher(String path);

5. void setAttribute(String key, Object data): Add some addition attribute into the request. But Important note is that the attribute lifecycle will be limited to the request.
6. Object getAttribute(String key): Fetch the attribute value.

RequestDispatcher: The RequestDispatcher interface in Java Servlet provides a way to forward a request from one servlet to another servlet or include the response of another servlet in the current response. It enables servlets to collaborate and share data during request processing.

    forward(request, response)
    include(request, response)

response
--------------
    void sendRedirect(String path):
        it send the response with the status code 302 and location header to the browser(client) so that client can redirect the request.
    Example:
        response.sendRedirect('subscriberDetail.jsp');

---------------------------

Setting The error page / exception handler in configuration (web.xml)
-------------------------------------------------------
<web-app>
    <!-- Other configuration elements -->
    
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/errorPage.jsp</location>
    </error-page>
    
    <error-page>
        <error-code>404</error-code>
        <location>/notFound.jsp</location>
    </error-page>
    
    <!-- Other error-page mappings -->
</web-app>

Initialization Parameter
--------------------------
Initialization parameters in servlets allow you to pass configuration values to your servlet at the time of initialization. 

These parameters can be defined in the deployment descriptor (web.xml) or using annotations. 

Initialization parameters provide a way to configure the behavior of your servlet without modifying its code. Here are the ways to define initialization parameters in a servlet:

Using web.xml (Deployment Descriptor):
---------------------------------------
In the web.xml file, you can define initialization parameters for a servlet using the <init-param> element within the <servlet> element. Here's an example:

<web-app>
  <!-- Other configuration elements -->
  <servlet>
    <servlet-name>MyServlet</servlet-name>
    <servlet-class>com.example.MyServlet</servlet-class>
    <init-param>
      <param-name>param1</param-name>
      <param-value>value1</param-value>
    </init-param>
    <init-param>
      <param-name>param2</param-name>
      <param-value>value2</param-value>
    </init-param>
  </servlet>
  <!-- Other servlet mappings -->
</web-app>


Using Annotations:
----------------------
With the Servlet API 3.0 and above, you can also use annotations to define initialization parameters directly in your servlet class. Here's an example:

@WebServlet(name = "MyServlet", urlPatterns = { "/myservlet","/myserve" },
            initParams = {
                @WebInitParam(name = "param1", value = "value1"),
                @WebInitParam(name = "param2", value = "value2")
            })
public class MyServlet extends HttpServlet {
    // Servlet code goes here
}

Retrieve Init Parameter
------------------------------
To access the initialization parameters within the servlet, you can use the getInitParameter() method of the ServletConfig object. For example:


public void init(ServletConfig config) throws ServletException {
    super.init(config);
    
    String param1 = config.getInitParameter("param1");
    String param2 = config.getInitParameter("param2");
    
    // Use the initialization parameters
}

Context parameter
--------------------------
Context parameters, also known as servlet context parameters or application-wide parameters, allow you to define global configuration values for your entire web application. These parameters are accessible to all servlets, filters, and other components within the application. Context parameters are useful when you need to share common configuration values across multiple servlets or components.


Using web.xml (Deployment Descriptor):
-----------------------------------------

<web-app>
  <!-- Other configuration elements -->
  <context-param>
    <param-name>param1</param-name>
    <param-value>value1</param-value>
  </context-param>
  <context-param>
    <param-name>param2</param-name>
    <param-value>value2</param-value>
  </context-param>
</web-app>

public void doGet(HttpServletRequest request, HttpServletResponse response) {
    ServletContext context = request.getServletContext();
    
    String param1 = context.getInitParameter("param1");
    String param2 = context.getInitParameter("param2");
    
    // Use the context parameters
}

State management
----------------------
1. Http is a stateless protocol. means a data sent in a request will be removed from the server as soon as the response is returned.

2. But to created intractive web pages, we need to remember the state of the web page. For example: if a user is already logged in then in the further request server need to rememeber that user is already logged in.


Method of state Management
----------------------------
1. Query String
2. Cookies
3. Session
4. Hidden form field.



Query String
--------------------
In this technique, we can send the data by appending in URL.

    1. localhost:8080/app/subscriberDetail?email=abc@example.com&mobile=1234567890

    2. flipkart.com/product-detail?id=4325&category=shirt

How to fetch the query string data
---------------------------------------
1. Query string data is passed into the URL in the same way as it is passed by submitting a form of GET method.

2. When GET method is applied.
    1. A form is submitted having GET method.
    2. When request is send by typing URL directly.
    3. When request is sent by clicking on a link.

3. Fetching the data is similar as we are fetch the request parameter.

    request.getParameter("email")
    request.getParamter("mobile")


Cookie
-------------
Cookie a text file created by the server and stored on the client machine and storing a piece of information in key-value pair.
    domain - gmail.com
    url - /
    cooking name:
    cooking value:
    expiry time: 
    https only: 

Once cookie is create, it is sent to the server in each request.

In Java, you can create and use cookies using the `javax.servlet.http.Cookie` class provided by the Servlet API. Here's how you can create and use a cookie in Java:

1. Creating a cookie:
   To create a cookie, you instantiate a new `Cookie` object and provide the name and value of the cookie. Here's an example:

   Cookie cookie = new Cookie("cookieName", "cookieValue");

   In this example, a cookie named "cookieName" is created with the value "cookieValue".

   2. Setting additional cookie properties:
   You can set additional properties for the cookie, such as the maximum age, domain, path, and whether it is secure or not. Here's an example:

   
   -cookie.setMaxAge(3600); // Set the cookie's maximum age in seconds
   -cookie.setDomain(".example.com"); // Set the domain for which the - cookie is valid
   -cookie.setPath("/"); // Set the path within the domain for which the cookie is valid
   cookie.setSecure(true); // Set whether the cookie should only be transmitted over HTTPS
   
   These properties allow you to control the lifespan, scope, and security of the cookie

3. Adding the cookie to the response:
   To send the cookie to the client's browser, you add it to the response using the `addCookie()` method of the `HttpServletResponse` object. Here's an example:

   response.addCookie(cookie);
   
   The cookie will be included in the response headers and sent to the client's browser.


4. Retrieving cookies from the request:
   To retrieve cookies sent by the client's browser, you can use the `getCookies()` method of the `HttpServletRequest` object. Here's an example:

   Cookie[] cookies = request.getCookies();
   
   The `getCookies()` method returns an array of `Cookie` objects that were sent by the client.

5. Accessing cookie properties:
   You can access various properties of a cookie, such as its name, value, maximum age, and other attributes. Here's an example:

   String cookieName = cookie.getName();
   String cookieValue = cookie.getValue();
   int maxAge = cookie.getMaxAge();
   
   These properties allow you to retrieve and use the information stored in the cookie.

By creating and using cookies in Java, you can store and retrieve information on the client's browser, allowing you to maintain state and personalize user experiences in web applications.


3. Session
--------------
How session tracking works in java?

- Getting the session:
	HttpSession session = request.getSession();
            OR
    HttpSession session = request.getSession(false);

-Setting session attributes:
	session.setAttribute("attributeName", attributeValue);

-Getting session attributes:
	Object attributeValue = session.getAttribute("attributeName");

-Removing session attributes:
	session.removeAttribute("attributeName");

-Invalidating the session:
	session.invalidate();

Other methods
----------------
-getId():
    Returns the unique identifier assigned to the session.

-getCreationTime():
    Returns the time (in milliseconds) when the session was created.

-getLastAccessedTime():
    Returns the time (in milliseconds) when the session was last accessed by the client.

-setMaxInactiveInterval(int interval):
    Sets the maximum time (in seconds) that the session can remain inactive before it is invalidated. A value of 0 or negative indicates that the session should never expire due to inactivity.

-getMaxInactiveInterval():
    Returns the maximum time (in seconds) that the session can remain inactive before it is invalidated.

